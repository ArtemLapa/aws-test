(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _tns;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var navBtn = document.querySelector(".header__navigation-btn");
var navMenu = document.querySelector(".nav-menu");
var humbIcon = document.querySelector(".fa-bars");
var closeIcon = document.querySelector(".fa-times");
var searchBtn = document.querySelector(".search__btn");
var searchWrapper = document.querySelector(".search__wrapper");
var searchBtnMob = document.querySelector(".header__search-btn--mobile");
var searchIconMob = document.querySelector(".header__search-icon");
var searchIconCloseMob = document.querySelector(".header__search-icon-close");
searchBtn.addEventListener("click", function (e) {
  e.preventDefault();
});
navBtn.addEventListener("click", function () {
  navMenu.classList.toggle("nav-menu--active");
  closeIcon.classList.toggle("d-none");
  humbIcon.classList.toggle("d-none");
});
searchBtnMob.addEventListener("click", function () {
  searchWrapper.classList.toggle("search__wrapper--active");
  searchIconCloseMob.classList.toggle("d-none");
  searchIconMob.classList.toggle("d-none");
});
/**
 * Star rating
 */

var ratingStars = _toConsumableArray(document.getElementsByClassName("star-rating__star"));

function executeRating(stars) {
  var starClassActive = "star-rating__star fas fa-star";
  var starClassInactive = "star-rating__star far fa-star";
  var starsLength = stars.length;
  var i;
  stars.map(function (star) {
    star.onclick = function () {
      i = stars.indexOf(star);

      if (star.className === starClassInactive) {
        for (i; i >= 0; --i) {
          stars[i].className = starClassActive;
        }
      } else {
        for (i; i < starsLength; ++i) {
          stars[i].className = starClassInactive;
        }
      }
    };
  });
}

executeRating(ratingStars);
/**
 * Tiny Slider Config
 */

var slider = tns((_tns = {
  container: ".carousel__main-carousel",
  items: 1,
  controlsContainer: ".custom-controls",
  mouseDrag: true,
  navContainer: ".thumbs__carousel-thumbs",
  navAsThumbnails: true,
  autoplay: false,
  autoplayButton: false,
  // autoplayTimeout: 1000,
  // autoplayButton: "#customize-toggle",
  swipeAngle: false,
  // speed: 400,
  controls: false,
  autoWidth: true,
  center: true
}, _defineProperty(_tns, "swipeAngle", false), _defineProperty(_tns, "fixedWidth", 300), _defineProperty(_tns, "gutter", 300), _defineProperty(_tns, "responsive", {
  992: {
    gutter: 510,
    controls: true,
    fixedWidth: 620,
    center: true
  },
  1200: {
    fixedWidth: 760
  }
}), _tns));

},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
