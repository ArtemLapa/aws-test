(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _tns;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var navBtn = document.querySelector(".header__navigation-btn");
var navMenu = document.querySelector(".nav-menu");
var humbIcon = document.querySelector(".fa-bars");
var closeIcon = document.querySelector(".fa-times");
var searchBtn = document.querySelector(".search__btn");
var searchWrapper = document.querySelector(".search__wrapper");
var searchBtnMob = document.querySelector(".header__search-btn--mobile");
var searchIconMob = document.querySelector(".header__search-icon");
var searchIconCloseMob = document.querySelector(".header__search-icon-close");
var main = document.querySelector("main");
var footer = document.querySelector("footer");
console.log(main, main.hasChildNodes());
/**
 * Header & navigation
 */

searchBtn.addEventListener("click", function (e) {
  e.preventDefault();
});
navBtn.addEventListener("click", function () {
  navMenu.classList.toggle("nav-menu--active");
  closeIcon.classList.toggle("d-none");
  humbIcon.classList.toggle("d-none");
});
searchBtnMob.addEventListener("click", function () {
  searchWrapper.classList.toggle("search__wrapper--active");
  searchIconCloseMob.classList.toggle("d-none");
  searchIconMob.classList.toggle("d-none");
});
/**
 * Footer sticky
 */

function isMainHasChild(elem) {
  if (elem.hasChildNodes()) {
    footer.classList.add("footer--sticky");
  }
}

isMainHasChild(main);
/**
 * Star rating
 */

var ratingStars = _toConsumableArray(document.getElementsByClassName("star-rating__star"));

function executeRating(stars) {
  var starClassActive = "star-rating__star fas fa-star";
  var starClassInactive = "star-rating__star far fa-star";
  var starsLength = stars.length;
  var i;
  stars.map(function (star) {
    star.onclick = function () {
      i = stars.indexOf(star);

      if (star.className === starClassInactive) {
        for (i; i >= 0; --i) {
          stars[i].className = starClassActive;
        }
      } else {
        for (i; i < starsLength; ++i) {
          stars[i].className = starClassInactive;
        }
      }
    };
  });
}

executeRating(ratingStars);
/**
 * Tiny Slider Config
 */

var slider = tns((_tns = {
  container: ".carousel__main-carousel",
  items: 1,
  controlsContainer: ".custom-controls",
  mouseDrag: true,
  navContainer: ".thumbs__carousel-thumbs",
  navAsThumbnails: true,
  autoplay: false,
  autoplayButton: false,
  // autoplayTimeout: 1000,
  // autoplayButton: "#customize-toggle",
  swipeAngle: false,
  // speed: 400,
  controls: false,
  autoWidth: true,
  center: true
}, _defineProperty(_tns, "swipeAngle", false), _defineProperty(_tns, "fixedWidth", 300), _defineProperty(_tns, "gutter", 300), _defineProperty(_tns, "responsive", {
  992: {
    gutter: 510,
    controls: true,
    fixedWidth: 620,
    center: true
  },
  1200: {
    fixedWidth: 760
  }
}), _tns));

},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJwcm9qZWN0cy9hd3MtdGVzdC9zcmMvanMvYXBwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDQUEsSUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQVQsQ0FBdUIseUJBQXZCLENBQWY7QUFDQSxJQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBVCxDQUF1QixXQUF2QixDQUFoQjtBQUNBLElBQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxhQUFULENBQXVCLFVBQXZCLENBQWpCO0FBQ0EsSUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsV0FBdkIsQ0FBbEI7QUFDQSxJQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsYUFBVCxDQUF1QixjQUF2QixDQUFsQjtBQUNBLElBQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxhQUFULENBQXVCLGtCQUF2QixDQUF0QjtBQUNBLElBQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxhQUFULENBQXVCLDZCQUF2QixDQUFyQjtBQUNBLElBQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxhQUFULENBQXVCLHNCQUF2QixDQUF0QjtBQUNBLElBQU0sa0JBQWtCLEdBQUcsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsNEJBQXZCLENBQTNCO0FBQ0EsSUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsTUFBdkIsQ0FBYjtBQUNBLElBQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFULENBQXVCLFFBQXZCLENBQWY7QUFFQSxPQUFPLENBQUMsR0FBUixDQUFZLElBQVosRUFBa0IsSUFBSSxDQUFDLGFBQUwsRUFBbEI7QUFFQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBUyxDQUFDLGdCQUFWLENBQTJCLE9BQTNCLEVBQW9DLFVBQUMsQ0FBRCxFQUFPO0FBQ3pDLEVBQUEsQ0FBQyxDQUFDLGNBQUY7QUFDRCxDQUZEO0FBSUEs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QUFDSixJQUFBLFVBQVUsRUFBRTtBQURSO0FBUEksQ0FuQkUsU0FBaEIiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsImNvbnN0IG5hdkJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaGVhZGVyX19uYXZpZ2F0aW9uLWJ0blwiKTtcclxuY29uc3QgbmF2TWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmF2LW1lbnVcIik7XHJcbmNvbnN0IGh1bWJJY29uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5mYS1iYXJzXCIpO1xyXG5jb25zdCBjbG9zZUljb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmZhLXRpbWVzXCIpO1xyXG5jb25zdCBzZWFyY2hCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNlYXJjaF9fYnRuXCIpO1xyXG5jb25zdCBzZWFyY2hXcmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zZWFyY2hfX3dyYXBwZXJcIik7XHJcbmNvbnN0IHNlYXJjaEJ0bk1vYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaGVhZGVyX19zZWFyY2gtYnRuLS1tb2JpbGVcIik7XHJcbmNvbnN0IHNlYXJjaEljb25Nb2IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmhlYWRlcl9fc2VhcmNoLWljb25cIik7XHJcbmNvbnN0IHNlYXJjaEljb25DbG9zZU1vYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaGVhZGVyX19zZWFyY2gtaWNvbi1jbG9zZVwiKTtcclxuY29uc3QgbWFpbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJtYWluXCIpO1xyXG5jb25zdCBmb290ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiZm9vdGVyXCIpO1xyXG5cclxuY29uc29sZS5sb2cobWFpbiwgbWFpbi5oYXNDaGlsZE5vZGVzKCkpO1xyXG5cclxuLyoqXHJcbiAqIEhlYWRlciAmIG5hdmlnYXRpb25cclxuICovXHJcbnNlYXJjaEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcclxuICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbn0pO1xyXG5cclxubmF2QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgbmF2TWVudS5jbGFzc0xpc3QudG9nZ2xlKFwibmF2LW1lbnUtLWFjdGl2ZVwiKTtcclxuICBjbG9zZUljb24uY2xhc3NMaXN0LnRvZ2dsZShcImQtbm9uZVwiKTtcclxuICBodW1iSWNvbi5jbGFzc0xpc3QudG9nZ2xlKFwiZC1ub25lXCIpO1xyXG59KTtcclxuXHJcbnNlYXJjaEJ0bk1vYi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIHNlYXJjaFdyYXBwZXIuY2xhc3NMaXN0LnRvZ2dsZShcInNlYXJjaF9fd3JhcHBlci0tYWN0aXZlXCIpO1xyXG4gIHNlYXJjaEljb25DbG9zZU1vYi5jbGFzc0xpc3QudG9nZ2xlKFwiZC1ub25lXCIpO1xyXG4gIHNlYXJjaEljb25Nb2IuY2xhc3NMaXN0LnRvZ2dsZShcImQtbm9uZVwiKTtcclxufSk7XHJcblxyXG4vKipcclxuICogRm9vdGVyIHN0aWNreVxyXG4gKi9cclxuZnVuY3Rpb24gaXNNYWluSGFzQ2hpbGQoZWxlbSkge1xyXG4gIGlmIChlbGVtLmhhc0NoaWxkTm9kZXMoKSkge1xyXG4gICAgZm9vdGVyLmNsYXNzTGlzdC5hZGQoXCJmb290ZXItLXN0aWNreVwiKTtcclxuICB9XHJcbn1cclxuXHJcbmlzTWFpbkhhc0NoaWxkKG1haW4pO1xyXG5cclxuLyoqXHJcbiAqIFN0YXIgcmF0aW5nXHJcbiAqL1xyXG5jb25zdCByYXRpbmdTdGFycyA9IFsuLi5kb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwic3Rhci1yYXRpbmdfX3N0YXJcIildO1xyXG5cclxuZnVuY3Rpb24gZXhlY3V0ZVJhdGluZyhzdGFycykge1xyXG4gIGNvbnN0IHN0YXJDbGFzc0FjdGl2ZSA9IFwic3Rhci1yYXRpbmdfX3N0YXIgZmFzIGZhLXN0YXJcIjtcclxuICBjb25zdCBzdGFyQ2xhc3NJbmFjdGl2ZSA9IFwic3Rhci1yYXRpbmdfX3N0YXIgZmFyIGZhLXN0YXJcIjtcclxuICBjb25zdCBzdGFyc0xlbmd0aCA9IHN0YXJzLmxlbmd0aDtcclxuICBsZXQgaTtcclxuICBzdGFycy5tYXAoKHN0YXIpID0+IHtcclxuICAgIHN0YXIub25jbGljayA9ICgpID0+IHtcclxuICAgICAgaSA9IHN0YXJzLmluZGV4T2Yoc3Rhcik7XHJcblxyXG4gICAgICBpZiAoc3Rhci5jbGFzc05hbWUgPT09IHN0YXJDbGFzc0luYWN0aXZlKSB7XHJcbiAgICAgICAgZm9yIChpOyBpID49IDA7IC0taSkgc3RhcnNbaV0uY2xhc3NOYW1lID0gc3RhckNsYXNzQWN0aXZlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZvciAoaTsgaSA8IHN0YXJzTGVuZ3RoOyArK2kpIHN0YXJzW2ldLmNsYXNzTmFtZSA9IHN0YXJDbGFzc0luYWN0aXZlO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH0pO1xyXG59XHJcbmV4ZWN1dGVSYXRpbmcocmF0aW5nU3RhcnMpO1xyXG5cclxuLyoqXHJcbiAqIFRpbnkgU2xpZGVyIENvbmZpZ1xyXG4gKi9cclxubGV0IHNsaWRlciA9IHRucyh7XHJcbiAgY29udGFpbmVyOiBcIi5jYXJvdXNlbF9fbWFpbi1jYXJvdXNlbFwiLFxyXG4gIGl0ZW1zOiAxLFxyXG4gIGNvbnRyb2xzQ29udGFpbmVyOiBcIi5jdXN0b20tY29udHJvbHNcIixcclxuICBtb3VzZURyYWc6IHRydWUsXHJcbiAgbmF2Q29udGFpbmVyOiBcIi50aHVtYnNfX2Nhcm91c2VsLXRodW1ic1wiLFxyXG4gIG5hdkFzVGh1bWJuYWlsczogdHJ1ZSxcclxuICBhdXRvcGxheTogZmFsc2UsXHJcbiAgYXV0b3BsYXlCdXR0b246IGZhbHNlLFxyXG4gIC8vIGF1dG9wbGF5VGltZW91dDogMTAwMCxcclxuICAvLyBhdXRvcGxheUJ1dHRvbjogXCIjY3VzdG9taXplLXRvZ2dsZVwiLFxyXG4gIHN3aXBlQW5nbGU6IGZhbHNlLFxyXG4gIC8vIHNwZWVkOiA0MDAsXHJcbiAgY29udHJvbHM6IGZhbHNlLFxyXG4gIGF1dG9XaWR0aDogdHJ1ZSxcclxuICBjZW50ZXI6IHRydWUsXHJcbiAgc3dpcGVBbmdsZTogZmFsc2UsXHJcbiAgZml4ZWRXaWR0aDogMzAwLFxyXG4gIGd1dHRlcjogMzAwLFxyXG4gIHJlc3BvbnNpdmU6IHtcclxuICAgIDk5Mjoge1xyXG4gICAgICBndXR0ZXI6IDUxMCxcclxuICAgICAgY29udHJvbHM6IHRydWUsXHJcbiAgICAgIGZpeGVkV2lkdGg6IDYyMCxcclxuICAgICAgY2VudGVyOiB0cnVlLFxyXG4gICAgfSxcclxuICAgIDEyMDA6IHtcclxuICAgICAgZml4ZWRXaWR0aDogNzYwLFxyXG4gICAgfSxcclxuICB9LFxyXG59KTtcclxuIl0sInByZUV4aXN0aW5nQ29tbWVudCI6Ii8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlMWEJoWTJzdlgzQnlaV3gxWkdVdWFuTWlMQ0p3Y205cVpXTjBjeTloZDNNdGRHVnpkQzl6Y21NdmFuTXZZWEJ3TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPenM3T3pzN096czdPenM3T3pzN096czdPMEZEUVVFc1NVRkJUU3hOUVVGTkxFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFWUXNRMEZCZFVJc2VVSkJRWFpDTEVOQlFXWTdRVUZEUVN4SlFVRk5MRTlCUVU4c1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQlZDeERRVUYxUWl4WFFVRjJRaXhEUVVGb1FqdEJRVU5CTEVsQlFVMHNVVUZCVVN4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGVUxFTkJRWFZDTEZWQlFYWkNMRU5CUVdwQ08wRkJRMEVzU1VGQlRTeFRRVUZUTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVZRc1EwRkJkVUlzVjBGQmRrSXNRMEZCYkVJN1FVRkRRU3hKUVVGTkxGTkJRVk1zUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCVkN4RFFVRjFRaXhqUVVGMlFpeERRVUZzUWp0QlFVTkJMRWxCUVUwc1lVRkJZU3hIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZVTEVOQlFYVkNMR3RDUVVGMlFpeERRVUYwUWp0QlFVTkJMRWxCUVUwc1dVRkJXU3hIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZVTEVOQlFYVkNMRFpDUVVGMlFpeERRVUZ5UWp0QlFVTkJMRWxCUVUwc1lVRkJZU3hIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZVTEVOQlFYVkNMSE5DUVVGMlFpeERRVUYwUWp0QlFVTkJMRWxCUVUwc2EwSkJRV3RDTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVZRc1EwRkJkVUlzTkVKQlFYWkNMRU5CUVROQ08wRkJRMEVzU1VGQlRTeEpRVUZKTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVZRc1EwRkJkVUlzVFVGQmRrSXNRMEZCWWp0QlFVTkJMRWxCUVUwc1RVRkJUU3hIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZVTEVOQlFYVkNMRkZCUVhaQ0xFTkJRV1k3UVVGRlFTeFBRVUZQTEVOQlFVTXNSMEZCVWl4RFFVRlpMRWxCUVZvc1JVRkJhMElzU1VGQlNTeERRVUZETEdGQlFVd3NSVUZCYkVJN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlEwRXNVMEZCVXl4RFFVRkRMR2RDUVVGV0xFTkJRVEpDTEU5QlFUTkNMRVZCUVc5RExGVkJRVU1zUTBGQlJDeEZRVUZQTzBGQlEzcERMRVZCUVVFc1EwRkJReXhEUVVGRExHTkJRVVk3UVVGRFJDeERRVVpFTzBGQlNVRXNUVUZCVFN4RFFVRkRMR2RDUVVGUUxFTkJRWGRDTEU5QlFYaENMRVZCUVdsRExGbEJRVTA3UVVGRGNrTXNSVUZCUVN4UFFVRlBMRU5CUVVNc1UwRkJVaXhEUVVGclFpeE5RVUZzUWl4RFFVRjVRaXhyUWtGQmVrSTdRVUZEUVN4RlFVRkJMRk5CUVZNc1EwRkJReXhUUVVGV0xFTkJRVzlDTEUxQlFYQkNMRU5CUVRKQ0xGRkJRVE5DTzBGQlEwRXNSVUZCUVN4UlFVRlJMRU5CUVVNc1UwRkJWQ3hEUVVGdFFpeE5RVUZ1UWl4RFFVRXdRaXhSUVVFeFFqdEJRVU5FTEVOQlNrUTdRVUZOUVN4WlFVRlpMRU5CUVVNc1owSkJRV0lzUTBGQk9FSXNUMEZCT1VJc1JVRkJkVU1zV1VGQlRUdEJRVU16UXl4RlFVRkJMR0ZCUVdFc1EwRkJReXhUUVVGa0xFTkJRWGRDTEUxQlFYaENMRU5CUVN0Q0xIbENRVUV2UWp0QlFVTkJMRVZCUVVFc2EwSkJRV3RDTEVOQlFVTXNVMEZCYmtJc1EwRkJOa0lzVFVGQk4wSXNRMEZCYjBNc1VVRkJjRU03UVVGRFFTeEZRVUZCTEdGQlFXRXNRMEZCUXl4VFFVRmtMRU5CUVhkQ0xFMUJRWGhDTEVOQlFTdENMRkZCUVM5Q08wRkJRMFFzUTBGS1JEdEJRVTFCTzBGQlEwRTdRVUZEUVRzN1FVRkRRU3hUUVVGVExHTkJRVlFzUTBGQmQwSXNTVUZCZUVJc1JVRkJPRUk3UVVGRE5VSXNUVUZCU1N4SlFVRkpMRU5CUVVNc1lVRkJUQ3hGUVVGS0xFVkJRVEJDTzBGQlEzaENMRWxCUVVFc1RVRkJUU3hEUVVGRExGTkJRVkFzUTBGQmFVSXNSMEZCYWtJc1EwRkJjVUlzWjBKQlFYSkNPMEZCUTBRN1FVRkRSanM3UVVGRlJDeGpRVUZqTEVOQlFVTXNTVUZCUkN4RFFVRmtPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVU5CTEVsQlFVMHNWMEZCVnl4elFrRkJUeXhSUVVGUkxFTkJRVU1zYzBKQlFWUXNRMEZCWjBNc2JVSkJRV2hETEVOQlFWQXNRMEZCYWtJN08wRkJSVUVzVTBGQlV5eGhRVUZVTEVOQlFYVkNMRXRCUVhaQ0xFVkJRVGhDTzBGQlF6VkNMRTFCUVUwc1pVRkJaU3hIUVVGSExDdENRVUY0UWp0QlFVTkJMRTFCUVUwc2FVSkJRV2xDTEVkQlFVY3NLMEpCUVRGQ08wRkJRMEVzVFVGQlRTeFhRVUZYTEVkQlFVY3NTMEZCU3l4RFFVRkRMRTFCUVRGQ08wRkJRMEVzVFVGQlNTeERRVUZLTzBGQlEwRXNSVUZCUVN4TFFVRkxMRU5CUVVNc1IwRkJUaXhEUVVGVkxGVkJRVU1zU1VGQlJDeEZRVUZWTzBGQlEyeENMRWxCUVVFc1NVRkJTU3hEUVVGRExFOUJRVXdzUjBGQlpTeFpRVUZOTzBGQlEyNUNMRTFCUVVFc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF5eFBRVUZPTEVOQlFXTXNTVUZCWkN4RFFVRktPenRCUVVWQkxGVkJRVWtzU1VGQlNTeERRVUZETEZOQlFVd3NTMEZCYlVJc2FVSkJRWFpDTEVWQlFUQkRPMEZCUTNoRExHRkJRVXNzUTBGQlRDeEZRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRmlMRVZCUVdkQ0xFVkJRVVVzUTBGQmJFSTdRVUZCY1VJc1ZVRkJRU3hMUVVGTExFTkJRVU1zUTBGQlJDeERRVUZNTEVOQlFWTXNVMEZCVkN4SFFVRnhRaXhsUVVGeVFqdEJRVUZ5UWp0QlFVTkVMRTlCUmtRc1RVRkZUenRCUVVOTUxHRkJRVXNzUTBGQlRDeEZRVUZSTEVOQlFVTXNSMEZCUnl4WFFVRmFMRVZCUVhsQ0xFVkJRVVVzUTBGQk0wSTdRVUZCT0VJc1ZVRkJRU3hMUVVGTExFTkJRVU1zUTBGQlJDeERRVUZNTEVOQlFWTXNVMEZCVkN4SFFVRnhRaXhwUWtGQmNrSTdRVUZCT1VJN1FVRkRSRHRCUVVOR0xFdEJVa1E3UVVGVFJDeEhRVlpFTzBGQlYwUTdPMEZCUTBRc1lVRkJZU3hEUVVGRExGZEJRVVFzUTBGQllqdEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkRRU3hKUVVGSkxFMUJRVTBzUjBGQlJ5eEhRVUZITzBGQlEyUXNSVUZCUVN4VFFVRlRMRVZCUVVVc01FSkJSRWM3UVVGRlpDeEZRVUZCTEV0QlFVc3NSVUZCUlN4RFFVWlBPMEZCUjJRc1JVRkJRU3hwUWtGQmFVSXNSVUZCUlN4clFrRklURHRCUVVsa0xFVkJRVUVzVTBGQlV5eEZRVUZGTEVsQlNrYzdRVUZMWkN4RlFVRkJMRmxCUVZrc1JVRkJSU3d3UWtGTVFUdEJRVTFrTEVWQlFVRXNaVUZCWlN4RlFVRkZMRWxCVGtnN1FVRlBaQ3hGUVVGQkxGRkJRVkVzUlVGQlJTeExRVkJKTzBGQlVXUXNSVUZCUVN4alFVRmpMRVZCUVVVc1MwRlNSanRCUVZOa08wRkJRMEU3UVVGRFFTeEZRVUZCTEZWQlFWVXNSVUZCUlN4TFFWaEZPMEZCV1dRN1FVRkRRU3hGUVVGQkxGRkJRVkVzUlVGQlJTeExRV0pKTzBGQlkyUXNSVUZCUVN4VFFVRlRMRVZCUVVVc1NVRmtSenRCUVdWa0xFVkJRVUVzVFVGQlRTeEZRVUZGTzBGQlprMHNkVU5CWjBKR0xFdEJhRUpGTEhWRFFXbENSaXhIUVdwQ1JTeHRRMEZyUWs0c1IwRnNRazBzZFVOQmJVSkdPMEZCUTFZc1QwRkJTenRCUVVOSUxFbEJRVUVzVFVGQlRTeEZRVUZGTEVkQlJFdzdRVUZGU0N4SlFVRkJMRkZCUVZFc1JVRkJSU3hKUVVaUU8wRkJSMGdzU1VGQlFTeFZRVUZWTEVWQlFVVXNSMEZJVkR0QlFVbElMRWxCUVVFc1RVRkJUU3hGUVVGRk8wRkJTa3dzUjBGRVN6dEJRVTlXTEZGQlFVMDdRVUZEU2l4SlFVRkJMRlZCUVZVc1JVRkJSVHRCUVVSU08wRkJVRWtzUTBGdVFrVXNVMEZCYUVJaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaWhtZFc1amRHbHZiaWdwZTJaMWJtTjBhVzl1SUhJb1pTeHVMSFFwZTJaMWJtTjBhVzl1SUc4b2FTeG1LWHRwWmlnaGJsdHBYU2w3YVdZb0lXVmJhVjBwZTNaaGNpQmpQVndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUhKbGNYVnBjbVVtSm5KbGNYVnBjbVU3YVdZb0lXWW1KbU1wY21WMGRYSnVJR01vYVN3aE1DazdhV1lvZFNseVpYUjFjbTRnZFNocExDRXdLVHQyWVhJZ1lUMXVaWGNnUlhKeWIzSW9YQ0pEWVc1dWIzUWdabWx1WkNCdGIyUjFiR1VnSjF3aUsya3JYQ0luWENJcE8zUm9jbTkzSUdFdVkyOWtaVDFjSWsxUFJGVk1SVjlPVDFSZlJrOVZUa1JjSWl4aGZYWmhjaUJ3UFc1YmFWMDllMlY0Y0c5eWRITTZlMzE5TzJWYmFWMWJNRjB1WTJGc2JDaHdMbVY0Y0c5eWRITXNablZ1WTNScGIyNG9jaWw3ZG1GeUlHNDlaVnRwWFZzeFhWdHlYVHR5WlhSMWNtNGdieWh1Zkh4eUtYMHNjQ3h3TG1WNGNHOXlkSE1zY2l4bExHNHNkQ2w5Y21WMGRYSnVJRzViYVYwdVpYaHdiM0owYzMxbWIzSW9kbUZ5SUhVOVhDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdjbVZ4ZFdseVpTWW1jbVZ4ZFdseVpTeHBQVEE3YVR4MExteGxibWQwYUR0cEt5c3BieWgwVzJsZEtUdHlaWFIxY200Z2IzMXlaWFIxY200Z2NuMHBLQ2tpTENKamIyNXpkQ0J1WVhaQ2RHNGdQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtGd2lMbWhsWVdSbGNsOWZibUYyYVdkaGRHbHZiaTFpZEc1Y0lpazdYSEpjYm1OdmJuTjBJRzVoZGsxbGJuVWdQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtGd2lMbTVoZGkxdFpXNTFYQ0lwTzF4eVhHNWpiMjV6ZENCb2RXMWlTV052YmlBOUlHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvWENJdVptRXRZbUZ5YzF3aUtUdGNjbHh1WTI5dWMzUWdZMnh2YzJWSlkyOXVJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpaGNJaTVtWVMxMGFXMWxjMXdpS1R0Y2NseHVZMjl1YzNRZ2MyVmhjbU5vUW5SdUlEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2loY0lpNXpaV0Z5WTJoZlgySjBibHdpS1R0Y2NseHVZMjl1YzNRZ2MyVmhjbU5vVjNKaGNIQmxjaUE5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9YQ0l1YzJWaGNtTm9YMTkzY21Gd2NHVnlYQ0lwTzF4eVhHNWpiMjV6ZENCelpXRnlZMmhDZEc1TmIySWdQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtGd2lMbWhsWVdSbGNsOWZjMlZoY21Ob0xXSjBiaTB0Ylc5aWFXeGxYQ0lwTzF4eVhHNWpiMjV6ZENCelpXRnlZMmhKWTI5dVRXOWlJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpaGNJaTVvWldGa1pYSmZYM05sWVhKamFDMXBZMjl1WENJcE8xeHlYRzVqYjI1emRDQnpaV0Z5WTJoSlkyOXVRMnh2YzJWTmIySWdQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtGd2lMbWhsWVdSbGNsOWZjMlZoY21Ob0xXbGpiMjR0WTJ4dmMyVmNJaWs3WEhKY2JtTnZibk4wSUcxaGFXNGdQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtGd2liV0ZwYmx3aUtUdGNjbHh1WTI5dWMzUWdabTl2ZEdWeUlEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2loY0ltWnZiM1JsY2x3aUtUdGNjbHh1WEhKY2JtTnZibk52YkdVdWJHOW5LRzFoYVc0c0lHMWhhVzR1YUdGelEyaHBiR1JPYjJSbGN5Z3BLVHRjY2x4dVhISmNiaThxS2x4eVhHNGdLaUJJWldGa1pYSWdKaUJ1WVhacFoyRjBhVzl1WEhKY2JpQXFMMXh5WEc1elpXRnlZMmhDZEc0dVlXUmtSWFpsYm5STWFYTjBaVzVsY2loY0ltTnNhV05yWENJc0lDaGxLU0E5UGlCN1hISmNiaUFnWlM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwTzF4eVhHNTlLVHRjY2x4dVhISmNibTVoZGtKMGJpNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtGd2lZMnhwWTJ0Y0lpd2dLQ2tnUFQ0Z2UxeHlYRzRnSUc1aGRrMWxiblV1WTJ4aGMzTk1hWE4wTG5SdloyZHNaU2hjSW01aGRpMXRaVzUxTFMxaFkzUnBkbVZjSWlrN1hISmNiaUFnWTJ4dmMyVkpZMjl1TG1Oc1lYTnpUR2x6ZEM1MGIyZG5iR1VvWENKa0xXNXZibVZjSWlrN1hISmNiaUFnYUhWdFlrbGpiMjR1WTJ4aGMzTk1hWE4wTG5SdloyZHNaU2hjSW1RdGJtOXVaVndpS1R0Y2NseHVmU2s3WEhKY2JseHlYRzV6WldGeVkyaENkRzVOYjJJdVlXUmtSWFpsYm5STWFYTjBaVzVsY2loY0ltTnNhV05yWENJc0lDZ3BJRDArSUh0Y2NseHVJQ0J6WldGeVkyaFhjbUZ3Y0dWeUxtTnNZWE56VEdsemRDNTBiMmRuYkdVb1hDSnpaV0Z5WTJoZlgzZHlZWEJ3WlhJdExXRmpkR2wyWlZ3aUtUdGNjbHh1SUNCelpXRnlZMmhKWTI5dVEyeHZjMlZOYjJJdVkyeGhjM05NYVhOMExuUnZaMmRzWlNoY0ltUXRibTl1WlZ3aUtUdGNjbHh1SUNCelpXRnlZMmhKWTI5dVRXOWlMbU5zWVhOelRHbHpkQzUwYjJkbmJHVW9YQ0prTFc1dmJtVmNJaWs3WEhKY2JuMHBPMXh5WEc1Y2NseHVMeW9xWEhKY2JpQXFJRVp2YjNSbGNpQnpkR2xqYTNsY2NseHVJQ292WEhKY2JtWjFibU4wYVc5dUlHbHpUV0ZwYmtoaGMwTm9hV3hrS0dWc1pXMHBJSHRjY2x4dUlDQnBaaUFvWld4bGJTNW9ZWE5EYUdsc1pFNXZaR1Z6S0NrcElIdGNjbHh1SUNBZ0lHWnZiM1JsY2k1amJHRnpjMHhwYzNRdVlXUmtLRndpWm05dmRHVnlMUzF6ZEdsamEzbGNJaWs3WEhKY2JpQWdmVnh5WEc1OVhISmNibHh5WEc1cGMwMWhhVzVJWVhORGFHbHNaQ2h0WVdsdUtUdGNjbHh1WEhKY2JpOHFLbHh5WEc0Z0tpQlRkR0Z5SUhKaGRHbHVaMXh5WEc0Z0tpOWNjbHh1WTI5dWMzUWdjbUYwYVc1blUzUmhjbk1nUFNCYkxpNHVaRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkSE5DZVVOc1lYTnpUbUZ0WlNoY0luTjBZWEl0Y21GMGFXNW5YMTl6ZEdGeVhDSXBYVHRjY2x4dVhISmNibVoxYm1OMGFXOXVJR1Y0WldOMWRHVlNZWFJwYm1jb2MzUmhjbk1wSUh0Y2NseHVJQ0JqYjI1emRDQnpkR0Z5UTJ4aGMzTkJZM1JwZG1VZ1BTQmNJbk4wWVhJdGNtRjBhVzVuWDE5emRHRnlJR1poY3lCbVlTMXpkR0Z5WENJN1hISmNiaUFnWTI5dWMzUWdjM1JoY2tOc1lYTnpTVzVoWTNScGRtVWdQU0JjSW5OMFlYSXRjbUYwYVc1blgxOXpkR0Z5SUdaaGNpQm1ZUzF6ZEdGeVhDSTdYSEpjYmlBZ1kyOXVjM1FnYzNSaGNuTk1aVzVuZEdnZ1BTQnpkR0Z5Y3k1c1pXNW5kR2c3WEhKY2JpQWdiR1YwSUdrN1hISmNiaUFnYzNSaGNuTXViV0Z3S0NoemRHRnlLU0E5UGlCN1hISmNiaUFnSUNCemRHRnlMbTl1WTJ4cFkyc2dQU0FvS1NBOVBpQjdYSEpjYmlBZ0lDQWdJR2tnUFNCemRHRnljeTVwYm1SbGVFOW1LSE4wWVhJcE8xeHlYRzVjY2x4dUlDQWdJQ0FnYVdZZ0tITjBZWEl1WTJ4aGMzTk9ZVzFsSUQwOVBTQnpkR0Z5UTJ4aGMzTkpibUZqZEdsMlpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUdadmNpQW9hVHNnYVNBK1BTQXdPeUF0TFdrcElITjBZWEp6VzJsZExtTnNZWE56VG1GdFpTQTlJSE4wWVhKRGJHRnpjMEZqZEdsMlpUdGNjbHh1SUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0JtYjNJZ0tHazdJR2tnUENCemRHRnljMHhsYm1kMGFEc2dLeXRwS1NCemRHRnljMXRwWFM1amJHRnpjMDVoYldVZ1BTQnpkR0Z5UTJ4aGMzTkpibUZqZEdsMlpUdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVHRjY2x4dUlDQjlLVHRjY2x4dWZWeHlYRzVsZUdWamRYUmxVbUYwYVc1bktISmhkR2x1WjFOMFlYSnpLVHRjY2x4dVhISmNiaThxS2x4eVhHNGdLaUJVYVc1NUlGTnNhV1JsY2lCRGIyNW1hV2RjY2x4dUlDb3ZYSEpjYm14bGRDQnpiR2xrWlhJZ1BTQjBibk1vZTF4eVhHNGdJR052Ym5SaGFXNWxjam9nWENJdVkyRnliM1Z6Wld4ZlgyMWhhVzR0WTJGeWIzVnpaV3hjSWl4Y2NseHVJQ0JwZEdWdGN6b2dNU3hjY2x4dUlDQmpiMjUwY205c2MwTnZiblJoYVc1bGNqb2dYQ0l1WTNWemRHOXRMV052Ym5SeWIyeHpYQ0lzWEhKY2JpQWdiVzkxYzJWRWNtRm5PaUIwY25WbExGeHlYRzRnSUc1aGRrTnZiblJoYVc1bGNqb2dYQ0l1ZEdoMWJXSnpYMTlqWVhKdmRYTmxiQzEwYUhWdFluTmNJaXhjY2x4dUlDQnVZWFpCYzFSb2RXMWlibUZwYkhNNklIUnlkV1VzWEhKY2JpQWdZWFYwYjNCc1lYazZJR1poYkhObExGeHlYRzRnSUdGMWRHOXdiR0Y1UW5WMGRHOXVPaUJtWVd4elpTeGNjbHh1SUNBdkx5QmhkWFJ2Y0d4aGVWUnBiV1Z2ZFhRNklERXdNREFzWEhKY2JpQWdMeThnWVhWMGIzQnNZWGxDZFhSMGIyNDZJRndpSTJOMWMzUnZiV2w2WlMxMGIyZG5iR1ZjSWl4Y2NseHVJQ0J6ZDJsd1pVRnVaMnhsT2lCbVlXeHpaU3hjY2x4dUlDQXZMeUJ6Y0dWbFpEb2dOREF3TEZ4eVhHNGdJR052Ym5SeWIyeHpPaUJtWVd4elpTeGNjbHh1SUNCaGRYUnZWMmxrZEdnNklIUnlkV1VzWEhKY2JpQWdZMlZ1ZEdWeU9pQjBjblZsTEZ4eVhHNGdJSE4zYVhCbFFXNW5iR1U2SUdaaGJITmxMRnh5WEc0Z0lHWnBlR1ZrVjJsa2RHZzZJRE13TUN4Y2NseHVJQ0JuZFhSMFpYSTZJRE13TUN4Y2NseHVJQ0J5WlhOd2IyNXphWFpsT2lCN1hISmNiaUFnSUNBNU9USTZJSHRjY2x4dUlDQWdJQ0FnWjNWMGRHVnlPaUExTVRBc1hISmNiaUFnSUNBZ0lHTnZiblJ5YjJ4ek9pQjBjblZsTEZ4eVhHNGdJQ0FnSUNCbWFYaGxaRmRwWkhSb09pQTJNakFzWEhKY2JpQWdJQ0FnSUdObGJuUmxjam9nZEhKMVpTeGNjbHh1SUNBZ0lIMHNYSEpjYmlBZ0lDQXhNakF3T2lCN1hISmNiaUFnSUNBZ0lHWnBlR1ZrVjJsa2RHZzZJRGMyTUN4Y2NseHVJQ0FnSUgwc1hISmNiaUFnZlN4Y2NseHVmU2s3WEhKY2JpSmRmUT09In0=
